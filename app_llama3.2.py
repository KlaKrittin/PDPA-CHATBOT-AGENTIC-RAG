import streamlit as st
import os
import gc
import base64
import time
import tempfile
import yaml
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
# from crewai import Agent, Crew, Process, Task, LLM
# from crewai.tasks.task_output import TaskOutput
try:
    from src.agentic_rag.tools.serper_tool import SerperDevTool
except ImportError:
    SerperDevTool = None
    st.warning("SerperDevTool not available. Please check serper_tool.py for web search.")
from src.agentic_rag.tools.custom_tool import DocumentSearchTool
from src.agentic_rag.crew import build_langgraph_workflow
import pytesseract

# Premium Deep Modern CSS & Layout
# Load Logo
import base64
logo_base64 = base64.b64encode(open("assets/Typhoon2.png", "rb").read()).decode()

st.markdown(f"""
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

html, body, [class^='css'] {{
    font-family: 'Inter', 'Prompt', sans-serif !important;
}}

.stApp {{
    background: linear-gradient(120deg, #181c2f 0%, #232946 100%);
    color: #f3f6fa;
    min-height: 100vh;
}}

/* üîπ Sidebar Styling */
section[data-testid="stSidebar"] {{
    width: 340px !important;
    background: rgba(36, 40, 59, 0.75);
    border-radius: 22px;
    padding: 40px 28px 32px 28px;
    margin: 32px 18px;
    box-shadow: 0 0 18px rgba(142, 148, 251, 0.3);
    backdrop-filter: blur(16px);
    color: #f3f6fa;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
}}

/* üîπ File Uploader */
.stFileUploader {{
    background: #1d1f33;
    border: 1.5px dashed #8f94fb;
    border-radius: 16px;
    padding: 24px;
    text-align: center;
    color: #ccc;
    font-weight: 500;
}}

.stFileUploader button {{
    background: linear-gradient(90deg, #4e54c8, #8f94fb);
    color: white;
    font-weight: bold;
    padding: 10px 22px;
    border-radius: 12px;
    border: none;
    margin-top: 12px;
}}

.stFileUploader button:hover {{
    background: linear-gradient(90deg, #8f94fb, #4e54c8);
    transform: scale(1.03);
    transition: all 0.2s ease-in-out;
}}

/* üîπ Reset Chat Button */
.stButton > button {{
    background: linear-gradient(90deg, #4e54c8, #8f94fb);
    color: white;
    font-weight: bold;
    padding: 10px 20px;
    border-radius: 14px;
    border: none;
    margin-top: 20px;
}}

.stButton > button:hover {{
    background: linear-gradient(90deg, #8f94fb, #4e54c8);
    transform: scale(1.03);
    box-shadow: 0 4px 14px rgba(78, 84, 200, 0.3);
}}

/* üîπ Chat Messages */
.stChatMessage {{
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 20px 24px;
    margin: 12px 0;
    border: 1px solid rgba(255,255,255,0.08);
    color: #f3f6fa;
}}

.stChatMessage[data-testid="user"] {{
    background: linear-gradient(90deg, #4e54c8, #8f94fb);
    color: white;
    font-weight: 600;
    box-shadow: 0 6px 18px rgba(78, 84, 200, 0.2);
}}

.stChatMessage[data-testid="assistant"] {{
    background: rgba(36, 40, 59, 0.85);
    border: 1px solid rgba(255,255,255,0.06);
    color: #f3f6fa;
}}

/* üîπ Input Bar Floating Bottom */
.stChatInputContainer {{
    position: fixed;
    left: 0; right: 0; bottom: 0;
    background: rgba(36, 40, 59, 0.92);
    padding: 16px 0;
    box-shadow: 0 -2px 16px rgba(31, 38, 135, 0.18);
    z-index: 100;
    display: flex;
    justify-content: center;
}}

.stTextInput {{
    width: 700px !important;
    max-width: 90vw;
}}

/* üîπ Scrollbar */
::-webkit-scrollbar {{
    width: 10px;
    background: #232526;
}}

::-webkit-scrollbar-thumb {{
    background: #4e54c8;
    border-radius: 8px;
}}

/* üîπ Main Logo and Title */
.main-header {{
    text-align: center;
    margin: 50px 0 30px 0;
}}

.main-logo {{
    width: 100px;
    margin-bottom: 16px;
    filter: drop-shadow(0 0 16px rgba(142, 148, 251, 0.5));
}}

.main-title {{
    font-size: 2.5rem;
    font-weight: 700;
    color: #ffffff;
    letter-spacing: 1.2px;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
}}

/* üîπ Expander Styling for Alternative Answers */
.streamlit-expanderHeader {{
    background: linear-gradient(90deg, #4e54c8, #8f94fb) !important;
    color: white !important;
    font-weight: 600 !important;
    border-radius: 12px !important;
    padding: 12px 16px !important;
    border: none !important;
    margin: 8px 0 !important;
    transition: all 0.3s ease !important;
}}

.streamlit-expanderHeader:hover {{
    background: linear-gradient(90deg, #8f94fb, #4e54c8) !important;
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 12px rgba(78, 84, 200, 0.3) !important;
}}

.streamlit-expanderContent {{
    background: rgba(36, 40, 59, 0.6) !important;
    border: 1px solid rgba(255, 255, 255, 0.1) !important;
    border-radius: 12px !important;
    padding: 16px !important;
    margin-top: 8px !important;
    backdrop-filter: blur(10px) !important;
}}

/* üîπ Alternative Answer Styling */
.alternative-answer {{
    background: rgba(255, 255, 255, 0.03);
    border-left: 3px solid #8f94fb;
    padding: 12px 16px;
    margin: 8px 0;
    border-radius: 8px;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}}
</style>

<!-- üîπ Injected Logo + Title -->
<div class="main-header">
    <img class="main-logo" src="data:image/png;base64,{logo_base64}" />
    <div class="main-title">PDPA Assistant</div>
</div>
""", unsafe_allow_html=True)


# Remove unused log_task_output function (was for CrewAI)
# def log_task_output(task_output: TaskOutput):
#     """Callback function to log the output of each task in a structured way."""
#     agent_name = task_output.agent
#     task_description = task_output.description
#     output = task_output.raw
    
#     print("\n" + "="*50)
#     print(f"‚úÖ Task Completed by: {agent_name}")
#     print(f"üìù Task: {task_description}")
    
#     # Specifically highlight the multi-answer and ranking outputs
#     if "Multiple Answer Generator" in agent_name:
#         print(f"\nüß† Generated Candidate Answers:\n{output}")
#     elif "Candidate Answer Ranker" in agent_name:
#         print(f"\n‚öñÔ∏è Ranked Answers:\n{output}")
#     else:
#         # Just print the raw output for other agents, as the verbose log is already detailed
#         print(f"Completed with output.")
        
#     print("="*50 + "\n")


# @st.cache_resource
# def load_llm():
#     llm = LLM(
#         model="ollama/hf.co/Float16-cloud/typhoon2-qwen2.5-7b-instruct-gguf:Q8_0",
#         base_url="http://localhost:11434"
#     )
#     return llm

# ===========================
#   Helper Functions
# ===========================
def is_pdpa_related(document_tool):
    """
    Checks if the uploaded file is related to PDPA by searching for PDPA-related terms in the document.
    
    Args:
        document_tool: The DocumentSearchTool instance initialized with the file
        
    Returns:
        bool: True if the file is likely PDPA-related, False otherwise
    """
    # PDPA-related keywords to check for
    pdpa_keywords = [
        "PDPA", "Personal Data Protection Act", "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "‡∏û.‡∏£.‡∏ö. ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", 
        "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "data controller", "data processor", "‡∏ú‡∏π‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏ê‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢"
    ]
    
    # Check if the document contains any PDPA-related keywords
    if hasattr(document_tool, 'raw_text') and document_tool.raw_text:
        text = document_tool.raw_text.lower()
        # Check for presence of keywords
        for keyword in pdpa_keywords:
            if keyword.lower() in text:
                return True
    
    return False

# ===========================
#   Define Agents & Tasks
# ===========================
def create_agents_and_tasks(pdf_tool, use_knowledge_base=True, file_query_mode=False):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á LangGraph workflow ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏Ñ‡∏ß‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PDPA ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
    ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ PDF (pdf_tool) ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö"""
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SerperDevTool ‡πÅ‡∏•‡∏∞ API key
    if SerperDevTool:
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ SERPER_API_KEY ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if os.getenv("SERPER_API_KEY"):
                print("‚úÖ SerperDevTool API key found. Web search will be enabled.")
            else:
                print("‚ö†Ô∏è SERPER_API_KEY not found. Web search will be disabled.")
                st.info("üåê Web search is available but requires SERPER_API_KEY. Add it to your .env file to enable web search.")
        except Exception as e:
            print(f"‚ùå Error checking SerperDevTool: {e}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á LangGraph workflow
    workflow = build_langgraph_workflow(pdf_tool=pdf_tool, use_knowledge_base=use_knowledge_base)
    return workflow

# ===========================
#   Streamlit State Setup
# ===========================
if "messages" not in st.session_state:
    st.session_state.messages = []

if "pdf_tool" not in st.session_state:
    st.session_state.pdf_tool = None

if "knowledge_base_tool" not in st.session_state:
    knowledge_files = os.path.join("knowledge")
    if os.path.exists(knowledge_files) and os.listdir(knowledge_files):
        try:
            st.session_state.knowledge_base_tool = DocumentSearchTool(file_path=knowledge_files)
        except Exception as e:
            st.error(f"Error loading knowledge base: {str(e)}")
            st.session_state.knowledge_base_tool = None
    else:
        st.session_state.knowledge_base_tool = None

if "langgraph_workflow" not in st.session_state:
    st.session_state.langgraph_workflow = build_langgraph_workflow()

if "using_uploaded_file" not in st.session_state:
    st.session_state.using_uploaded_file = False

if "is_pdpa_related" not in st.session_state:
    st.session_state.is_pdpa_related = False

# ===========================
#   Helper Functions
# ===========================
def build_conversation_context(messages, max_turns=3):
    """‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
    if not messages:
        return ""
    
    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ context ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    start_idx = max(0, len(messages) - (max_turns * 2))
    recent_messages = messages[start_idx:]
    
    context = []
    for msg in recent_messages:
        role_prefix = "User: " if msg["role"] == "user" else "Assistant: "
        context.append(f"{role_prefix}{msg['content']}")
    
    return "\n".join(context)

def reset_chat():
    """‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
    st.session_state.messages = []
    perform_periodic_gc()

def perform_periodic_gc():
    """‡∏ó‡∏≥ garbage collection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥"""
    try:
        if st.session_state.pdf_tool and hasattr(st.session_state.pdf_tool, "_perform_gc"):
            st.session_state.pdf_tool._perform_gc()
        gc.collect()
    except Exception as e:
        st.error(f"Error during garbage collection: {str(e)}")

def display_pdf(file_bytes: bytes, file_name: str):
    """‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô iframe"""
    base64_pdf = base64.b64encode(file_bytes).decode("utf-8")
    pdf_display = f"""
    <div style="display: flex; justify-content: center; margin: 20px 0;">
        <iframe 
            src="data:application/pdf;base64,{base64_pdf}" 
            width="100%" 
            height="600px" 
            style="border: 1px solid rgba(255,255,255,0.1); border-radius: 12px; box-shadow: 0 4px 30px rgba(0,0,0,0.1);"
            type="application/pdf"
        >
        </iframe>
    </div>
    """
    st.markdown(f"<h3 style='text-align: center; margin-bottom: 16px; color: #fff;'>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {file_name}</h3>", unsafe_allow_html=True)
    st.markdown(pdf_display, unsafe_allow_html=True)

# ===========================
#   Sidebar
# ===========================
with st.sidebar:
    st.markdown("<h2 style='text-align: center; margin-bottom: 20px;'>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDPA</h2>", unsafe_allow_html=True)
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF", type=["pdf"])

    if uploaded_file is not None:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF tool ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_file_path = os.path.join(temp_dir, uploaded_file.name)
            with open(temp_file_path, "wb") as f:
                f.write(uploaded_file.getvalue())

            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..."):
                # ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                if st.session_state.pdf_tool is not None:
                    if hasattr(st.session_state.pdf_tool, "release_resources"):
                        st.session_state.pdf_tool.release_resources()
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á tool ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                try:
                    st.session_state.pdf_tool = DocumentSearchTool(file_path=temp_file_path)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PDPA ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    st.session_state.is_pdpa_related = is_pdpa_related(st.session_state.pdf_tool)
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á workflow ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                    st.session_state.langgraph_workflow = create_agents_and_tasks(
                        st.session_state.pdf_tool, 
                        use_knowledge_base=False,
                        file_query_mode=True
                    )
                    st.session_state.using_uploaded_file = True
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {str(e)}")
                    st.session_state.pdf_tool = None
                    st.session_state.is_pdpa_related = False
            
        if st.session_state.pdf_tool:
            if st.session_state.is_pdpa_related:
                st.success("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PDPA ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
            else:
                st.warning("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PDPA ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PDPA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PDPA")
            # ‡πÅ‡∏™‡∏î‡∏á PDF ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
            display_pdf(uploaded_file.getvalue(), uploaded_file.name)
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        if st.session_state.using_uploaded_file or st.session_state.langgraph_workflow is None:
            # ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if st.session_state.pdf_tool is not None:
                if hasattr(st.session_state.pdf_tool, "release_resources"):
                    st.session_state.pdf_tool.release_resources()
                st.session_state.pdf_tool = None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á workflow ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
            st.session_state.langgraph_workflow = create_agents_and_tasks(
                st.session_state.knowledge_base_tool, 
                use_knowledge_base=True
            )
            st.session_state.using_uploaded_file = False
            st.session_state.is_pdpa_related = True  # ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PDPA
        
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ PDPA")

    st.button("‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤", on_click=reset_chat)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á web search
    st.markdown("---")
    st.markdown("### üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    
    if SerperDevTool and os.getenv("SERPER_API_KEY"):
        st.success("üåê Web Search: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    elif SerperDevTool:
        st.warning("üåê Web Search: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ API Key")
        st.info("‡πÄ‡∏û‡∏¥‡πà‡∏° SERPER_API_KEY ‡πÉ‡∏ô .env file ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô web search")
    else:
        st.error("üåê Web Search: ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        st.info("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á serper_dev ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô web search")

# ===========================
#   ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
# ===========================
for message in st.session_state.messages:
    with st.chat_message(message["role"], avatar="üë§" if message["role"] == "user" else None):
        st.markdown(message["content"])

# ===========================
#   Chat Input
# ===========================
if st.session_state.using_uploaded_file:
    prompt_placeholder = "‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDPA ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î..."
else:
    prompt_placeholder = "‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PDPA..."

prompt = st.chat_input(prompt_placeholder)

# Guardrail (UI layer) ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà workflow
if prompt:
    print(f"üîç App: Processing prompt: {prompt}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SecurityFilter
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user", avatar="üë§"):
        st.markdown(prompt)
    
    _SecurityFilter = None
    try:
        from src.agentic_rag.tools.security_filter import SecurityFilter as _SecurityFilter
        print("‚úÖ App: SecurityFilter imported successfully")
    except Exception as e:
        print(f"‚ùå App: SecurityFilter import failed: {e}")
        try:
            from agentic_rag.tools.security_filter import SecurityFilter as _SecurityFilter
            print("‚úÖ App: SecurityFilter imported successfully (fallback)")
        except Exception as e2:
            print(f"‚ùå App: SecurityFilter import failed (fallback): {e2}")
            _SecurityFilter = None
    if _SecurityFilter is not None:
        try:
            print(f"üîç SecurityFilter: Processing prompt: {prompt}")
            _ui_sf = _SecurityFilter()
            _ui_filter = _ui_sf.filter_user_input(prompt or "")
            print(f"üîç SecurityFilter result: {_ui_filter}")
            
            if not _ui_filter.get("should_respond", True):
                print("üî¥ SecurityFilter: BLOCKING prompt")
                st.session_state.messages.append({"role": "assistant", "content": _ui_filter.get("response_message") or "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û"})
                with st.chat_message("assistant"):
                    st.markdown(_ui_filter.get("response_message") or "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û")
                prompt = None
            else:
                print("‚úÖ SecurityFilter: ALLOWING prompt")
        except Exception as e:
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ guardrail ‡∏£‡∏∞‡∏î‡∏±‡∏ö workflow ‡πÅ‡∏ó‡∏ô
            print(f"‚ùå SecurityFilter error: {e}")
            st.error(f"SecurityFilter error: {e}")
            pass
    else:
        print("‚ùå SecurityFilter: Not available")

if prompt:
    # 2. ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å LangGraph
    conversation_context = build_conversation_context(st.session_state.messages)
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        full_response = ""
        start_time = time.time()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PDPA ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        if st.session_state.using_uploaded_file and not st.session_state.is_pdpa_related:
            # ‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PDPA
            full_response = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö ‡∏û.‡∏£.‡∏ö. ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (PDPA) ‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PDPA ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PDPA ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PDPA ‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏Ñ‡∏ß‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ"
            result = {"response": full_response}
        else:
            # ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏à‡∏≤‡∏Å LangGraph
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..."):
                print("\n" + "="*50)
                print(f"User Query: {prompt}")
                print("="*50 + "\n")
                print("üöÄ LangGraph is kicking off the process...")
                conversation_history = f"Previous conversation:\n{conversation_context}\n\nNew question:"
                inputs = {"query": prompt, "context": conversation_history}
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô stream ‡∏ó‡∏µ‡∏•‡∏∞ step
                stream = st.session_state.langgraph_workflow.stream(inputs, stream_mode="values")
                progress_placeholder = st.empty()
                progress_log = []
                result = None
                last_with_answer = None
                for chunk in stream:
                    result = chunk
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                    if "progress_log" in chunk and chunk["progress_log"]:
                        progress_log = chunk["progress_log"]
                        progress_placeholder.markdown(
                            "<div style='color: #888; opacity: 0.7; font-size: 0.92em;'>"
                            + "<br>".join([f"‚Ä¢ {step}" for step in progress_log])
                            + "</div>", unsafe_allow_html=True
                        )
                    # ‡πÄ‡∏Å‡πá‡∏ö chunk ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ response ‡∏´‡∏£‡∏∑‡∏≠ candidates
                    if ("response" in chunk and chunk["response"]) or ("candidates" in chunk and chunk["candidates"]):
                        last_with_answer = chunk
                progress_placeholder.empty()
                if last_with_answer is not None:
                    result = last_with_answer
                print("\n" + "="*50)
                print("‚úÖ LangGraph process finished.")
                print(f"üèÅ Final Result: {result}")
                print("="*50 + "\n")
                # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                def _extract_best_answer(res):
                    try:
                        if not isinstance(res, dict):
                            return ""
                        for key in ["response", "best_answer"]:
                            val = res.get(key)
                            if isinstance(val, str) and val.strip():
                                return val.strip()
                        for key in ["ranked", "candidates"]:
                            arr = res.get(key)
                            if isinstance(arr, list) and arr:
                                first_val = arr[0]
                                if isinstance(first_val, str) and first_val.strip():
                                    return first_val.strip()
                        return ""
                    except Exception:
                        return ""
                full_response = _extract_best_answer(result)
                if not full_response:
                    # fallback ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏á
                    full_response = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏° PDPA ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
        
        processing_time = time.time() - start_time
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1) ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß
        best_answer = full_response
        if "candidates" in result and len(result["candidates"]) > 0:
            # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏£‡∏Å (‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1) ‡∏à‡∏≤‡∏Å candidates
            if isinstance(result["candidates"][0], str) and result["candidates"][0].strip():
                best_answer = result["candidates"][0].strip()
        
        # ‡πÅ‡∏™‡∏î‡∏á progress log (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if "progress_log" in result and result["progress_log"]:
            with st.expander("üõ†Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î/‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Agent (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π)", expanded=False):
                for step in result["progress_log"]:
                    st.markdown(
                        f"""
                        <div style=\"margin-bottom: 8px; padding: 8px 12px; border-radius: 6px; color: #888; font-size: 0.97em;\">
                            {step}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
        lines = best_answer.split('\n') if isinstance(best_answer, str) else [str(best_answer)]
        for i, line in enumerate(lines):
            full_response_so_far = '\n'.join(lines[:i+1])
            message_placeholder.markdown(full_response_so_far + "‚ñå")
            time.sleep(0.05)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
        message_placeholder.markdown(best_answer)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô expander ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if "web_references" in result and result["web_references"]:
            with st.expander("üìö ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π/‡∏ã‡πà‡∏≠‡∏ô)", expanded=False):
                st.markdown(result["web_references"])
        

        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        info_container = st.container()
        with info_container:
            col1, col2, col3 = st.columns(3)
            with col1:
                if "retrieval_source" in result:
                    if result["retrieval_source"] == "pdf":
                        source_info = "üìö ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ PDPA"
                    elif result["retrieval_source"] == "pdf+web":
                        source_info = "üåê ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ + ‡πÄ‡∏ß‡πá‡∏ö"
                        if "web_references" in result and result["web_references"]:
                            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
                            ref_count = len([line for line in result["web_references"].split('\n') if line.strip()])
                            source_info += f" ({ref_count} ‡πÅ‡∏´‡∏•‡πà‡∏á)"
                    else:
                        source_info = "üí≠ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
                    
                    st.markdown(f"""
                    <div style="background: rgba(255, 255, 255, 0.05); padding: 8px 12px; border-radius: 6px; margin-top: 8px;">
                        <small style="color: #8f94fb;">{source_info}</small>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div style="background: rgba(255, 255, 255, 0.05); padding: 8px 12px; border-radius: 6px; margin-top: 8px;">
                        <small style="color: #8f94fb;">üí≠ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</small>
                    </div>
                    """, unsafe_allow_html=True)
            with col2:
                if "candidates" in result and len(result["candidates"]) > 1:
                    st.markdown(f"""
                    <div style="background: rgba(255, 255, 255, 0.05); padding: 8px 12px; border-radius: 6px; margin-top: 8px;">
                        <small style="color: #8f94fb;">üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö {len(result["candidates"])} ‡πÅ‡∏ö‡∏ö</small>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div style="background: rgba(255, 255, 255, 0.05); padding: 8px 12px; border-radius: 6px; margin-top: 8px;">
                        <small style="color: #8f94fb;">üí¨ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</small>
                    </div>
                    """, unsafe_allow_html=True)
            with col3:
                # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                st.markdown(f"""
                <div style="background: rgba(255, 255, 255, 0.05); padding: 8px 12px; border-radius: 6px; margin-top: 8px;">
                    <small style="color: #8f94fb;">‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {processing_time:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</small>
                </div>
                """, unsafe_allow_html=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ (‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ ChatGPT)
        if "candidates" in result and len(result["candidates"]) > 1:
            st.markdown("---")
            with st.expander("üîç ‡∏î‡∏π‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ", expanded=False):
                st.markdown("""
                <div style="background: rgba(78, 84, 200, 0.1); padding: 12px; border-radius: 8px; margin-bottom: 16px;">
                    <p style="margin: 0; color: #8f94fb; font-size: 14px;">
                        üí° ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 
                        ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ
                    </p>
                </div>
                """, unsafe_allow_html=True)
                

                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                for i, candidate in enumerate(result["candidates"][1:], 2):
                    st.markdown(f"""
                    <div class=\"alternative-answer\">
                        <h4>üí° ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà {i}</h4>
                        <p>{candidate}</p>
                    </div>
                    """, unsafe_allow_html=True)
    
    # 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    st.session_state.messages.append({"role": "assistant", "content": best_answer})
    
    # 5. ‡∏ó‡∏≥ garbage collection ‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
    perform_periodic_gc()

# On Windows
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
